{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Fund__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSenders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getSentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc399986898befb39f3730b2dd0cceea251c8d042bf8e2724ac19e01a43a890fa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1043027",
    "logsBloom": "0x
    "blockHash": "0x1a33ec54b866394982f3bc5342ffe37cde9612e7b3f7c90611677fdbc6d40c5d",
    "transactionHash": "0xc399986898befb39f3730b2dd0cceea251c8d042bf8e2724ac19e01a43a890fa",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1043027",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "d83e7389392e9b40335250044197c6f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fund__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getSentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror Fund__NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint;\\r\\n\\r\\n    //if a variable is initilize once and never changes you can use constant to save some gas\\r\\n    uint256 public constant minimumUsd = 50 * 1e18;\\r\\n    address[] private senders;\\r\\n    mapping(address => uint) private sentAmount;\\r\\n    AggregatorV3Interface private priceFeed;\\r\\n    address private immutable owner;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        //msg.value is the amount we are sending to the contract\\r\\n        //you have to specify the first parameter of the function infront as an object and use dot convextion and if there was a sencond parameter you have to provide that inside the function\\r\\n        require(\\r\\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\\r\\n            \\\"Didn't send enough\\\"\\r\\n        ); // 1e18 == 1 * 10 * 18 == 1000000000000000000\\r\\n        senders.push(msg.sender);\\r\\n        sentAmount[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint senderIndex = 0;\\r\\n            senderIndex < senders.length;\\r\\n            senderIndex++\\r\\n        ) {\\r\\n            address funders = senders[senderIndex];\\r\\n            sentAmount[funders] = 0;\\r\\n        }\\r\\n        senders = new address[](0);\\r\\n\\r\\n        //Now to transfer ETH from this contract to an address who call this withdraw function\\r\\n        // Here msg.sender is of type address which cannot sent ether or anything to anyother address\\r\\n        // So we are making the address payable type which can sent any crypto from this contract to the callers address\\r\\n        //also here address(this) refers to the address of this contract address\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n\\r\\n        //Now using send method\\r\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        //require(sendSuccess,\\\"send fail\\\");\\r\\n\\r\\n        //Now using call method and it is the most reccommed method\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    //since you are using this in the constructor you have to use immutable i dont know why i cant use contant also its only for the variable you are not changing\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        //require is old way for checking owner and it cost more gas\\r\\n        //require(msg.sender == owner,\\\"Sorry sir you are not the owner\\\");\\r\\n\\r\\n        //this is the new method for checking the owner\\r\\n        if (msg.sender != owner) {\\r\\n            revert Fund__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory sender = senders;\\r\\n        //mappings cant be in memory\\r\\n        for (uint funderIndex = 0; funderIndex < sender.length; funderIndex++) {\\r\\n            address senderRead = sender[funderIndex];\\r\\n            sentAmount[senderRead] = 0;\\r\\n        }\\r\\n        senders = new address[](0);\\r\\n        (bool success, ) = owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getSenders(uint index) public view returns (address) {\\r\\n        return senders[index];\\r\\n    }\\r\\n\\r\\n    function getSentAmount(address sender) public view returns (uint) {\\r\\n        return sentAmount[sender];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return priceFeed;\\r\\n    }\\r\\n\\r\\n    //What happen if someone send eth to this contract without calling the fund fuction\\r\\n    /*   receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    } */\\r\\n}\\r\\n\",\"keccak256\":\"0x9b53888a8f92e0d9973908569cede227c9c2ad42a25e409f781e4a176a6287d1\",\"license\":\"ISC\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        //to get the price you need to intreact with the oracle network in the chainlink contract\\r\\n        //for that you need the ABI and the Contract Address\\r\\n\\r\\n        (, int price, , , ) = priceFeed.latestRoundData();\\r\\n        //it the price of the ETH in terms of USD\\r\\n        //and it will return 8 decimal units\\r\\n        return uint(price * 1e10);\\r\\n    }\\r\\n\\r\\n    /*     function getVersion() internal view returns (uint) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    } */\\r\\n\\r\\n    function getConversionRate(uint _ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint ethPrice = getPrice(priceFeed);\\r\\n        uint ethPriceInUsd = (ethPrice * _ethAmount) / 1e18;\\r\\n        return ethPriceInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6088f4c40cab253a6b6e6db92fb4c981aa471a7a5afddbc037e8671184b1beb3\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200130838038062001308833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61118262000186600039600081816101b50152818161043e01528181610612015261080801526111826000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063a032138d14610155578063b60d428814610192578063be2693f01461019c5761007b565b8063098de820146100805780633ccfd60b146100ab57806369db5457146100c2578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100956101a6565b6040516100a29190610a70565b60405180910390f35b3480156100b757600080fd5b506100c06101b3565b005b3480156100ce57600080fd5b506100e960048036038101906100e49190610abc565b6103f3565b6040516100f69190610b2a565b60405180910390f35b34801561010b57600080fd5b5061011461043a565b6040516101219190610b2a565b60405180910390f35b34801561013657600080fd5b5061013f610462565b60405161014c9190610ba4565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610beb565b61048c565b6040516101899190610a70565b60405180910390f35b61019a6104d5565b005b6101a4610610565b005b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610238576040517fa9b8b84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102e357600080828154811061025d5761025c610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102db90610c76565b91505061023b565b50600067ffffffffffffffff8111156102ff576102fe610cbf565b5b60405190808252806020026020018201604052801561032d5781602001602082028036833780820191505090505b50600090805190602001906103439291906109b0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161036a90610d1f565b60006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e790610d91565b60405180910390fd5b50565b600080828154811061040857610407610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b1880000610514600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d490919063ffffffff16565b1015610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c90610dfd565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106079190610e1d565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610695576040517fa9b8b84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ce575b5050505050905060005b81518110156107a35760008282815181106107405761073f610c18565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079b90610c76565b915050610722565b50600067ffffffffffffffff8111156107bf576107be610cbf565b5b6040519080825280602002602001820160405280156107ed5781602001602082028036833780820191505090505b50600090805190602001906108039291906109b0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084a90610d1f565b60006040518083038185875af1925050503d8060008114610887576040519150601f19603f3d011682016040523d82523d6000602084013e61088c565b606091505b50509050806108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790610d91565b60405180910390fd5b5050565b6000806108e083610910565b90506000670de0b6b3a764000085836108f99190610e73565b6109039190610efc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190610fba565b5050509150506402540be400816109a89190611035565b915050919050565b828054828255906000526020600020908101928215610a29579160200282015b82811115610a285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d0565b5b509050610a369190610a3a565b5090565b5b80821115610a53576000816000905550600101610a3b565b5090565b6000819050919050565b610a6a81610a57565b82525050565b6000602082019050610a856000830184610a61565b92915050565b600080fd5b610a9981610a57565b8114610aa457600080fd5b50565b600081359050610ab681610a90565b92915050565b600060208284031215610ad257610ad1610a8b565b5b6000610ae084828501610aa7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1482610ae9565b9050919050565b610b2481610b09565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000819050919050565b6000610b6a610b65610b6084610ae9565b610b45565b610ae9565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b610bc881610b09565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600060208284031215610c0157610c00610a8b565b5b6000610c0f84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8182610a57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610c47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d09600083610cee565b9150610d1482610cf9565b600082019050919050565b6000610d2a82610cfc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d7b600b83610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610de7601283610d34565b9150610df282610db1565b602082019050919050565b60006020820190508181036000830152610e1681610dda565b9050919050565b6000610e2882610a57565b9150610e3383610a57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e6857610e67610c47565b5b828201905092915050565b6000610e7e82610a57565b9150610e8983610a57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ec257610ec1610c47565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0782610a57565b9150610f1283610a57565b925082610f2257610f21610ecd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4c81610f2d565b8114610f5757600080fd5b50565b600081519050610f6981610f43565b92915050565b6000819050919050565b610f8281610f6f565b8114610f8d57600080fd5b50565b600081519050610f9f81610f79565b92915050565b600081519050610fb481610a90565b92915050565b600080600080600060a08688031215610fd657610fd5610a8b565b5b6000610fe488828901610f5a565b9550506020610ff588828901610f90565b945050604061100688828901610fa5565b935050606061101788828901610fa5565b925050608061102888828901610f5a565b9150509295509295909350565b600061104082610f6f565b915061104b83610f6f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108a57611089610c47565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c7576110c6610c47565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110457611103610c47565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114157611140610c47565b5b82820290509291505056fea2646970667358221220381e25ceeeeadb90f740dae0c92f4c6b6bfa5cea4e02f0935dabc4a533042fd964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063a032138d14610155578063b60d428814610192578063be2693f01461019c5761007b565b8063098de820146100805780633ccfd60b146100ab57806369db5457146100c2578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100956101a6565b6040516100a29190610a70565b60405180910390f35b3480156100b757600080fd5b506100c06101b3565b005b3480156100ce57600080fd5b506100e960048036038101906100e49190610abc565b6103f3565b6040516100f69190610b2a565b60405180910390f35b34801561010b57600080fd5b5061011461043a565b6040516101219190610b2a565b60405180910390f35b34801561013657600080fd5b5061013f610462565b60405161014c9190610ba4565b60405180910390f35b34801561016157600080fd5b5061017c60048036038101906101779190610beb565b61048c565b6040516101899190610a70565b60405180910390f35b61019a6104d5565b005b6101a4610610565b005b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610238576040517fa9b8b84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102e357600080828154811061025d5761025c610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102db90610c76565b91505061023b565b50600067ffffffffffffffff8111156102ff576102fe610cbf565b5b60405190808252806020026020018201604052801561032d5781602001602082028036833780820191505090505b50600090805190602001906103439291906109b0565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161036a90610d1f565b60006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e790610d91565b60405180910390fd5b50565b600080828154811061040857610407610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b1880000610514600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d490919063ffffffff16565b1015610555576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054c90610dfd565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106079190610e1d565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610695576040517fa9b8b84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ce575b5050505050905060005b81518110156107a35760008282815181106107405761073f610c18565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079b90610c76565b915050610722565b50600067ffffffffffffffff8111156107bf576107be610cbf565b5b6040519080825280602002602001820160405280156107ed5781602001602082028036833780820191505090505b50600090805190602001906108039291906109b0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161084a90610d1f565b60006040518083038185875af1925050503d8060008114610887576040519150601f19603f3d011682016040523d82523d6000602084013e61088c565b606091505b50509050806108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790610d91565b60405180910390fd5b5050565b6000806108e083610910565b90506000670de0b6b3a764000085836108f99190610e73565b6109039190610efc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190610fba565b5050509150506402540be400816109a89190611035565b915050919050565b828054828255906000526020600020908101928215610a29579160200282015b82811115610a285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d0565b5b509050610a369190610a3a565b5090565b5b80821115610a53576000816000905550600101610a3b565b5090565b6000819050919050565b610a6a81610a57565b82525050565b6000602082019050610a856000830184610a61565b92915050565b600080fd5b610a9981610a57565b8114610aa457600080fd5b50565b600081359050610ab681610a90565b92915050565b600060208284031215610ad257610ad1610a8b565b5b6000610ae084828501610aa7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1482610ae9565b9050919050565b610b2481610b09565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000819050919050565b6000610b6a610b65610b6084610ae9565b610b45565b610ae9565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b610bc881610b09565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600060208284031215610c0157610c00610a8b565b5b6000610c0f84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8182610a57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610c47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d09600083610cee565b9150610d1482610cf9565b600082019050919050565b6000610d2a82610cfc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610d7b600b83610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610de7601283610d34565b9150610df282610db1565b602082019050919050565b60006020820190508181036000830152610e1681610dda565b9050919050565b6000610e2882610a57565b9150610e3383610a57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e6857610e67610c47565b5b828201905092915050565b6000610e7e82610a57565b9150610e8983610a57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ec257610ec1610c47565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0782610a57565b9150610f1283610a57565b925082610f2257610f21610ecd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4c81610f2d565b8114610f5757600080fd5b50565b600081519050610f6981610f43565b92915050565b6000819050919050565b610f8281610f6f565b8114610f8d57600080fd5b50565b600081519050610f9f81610f79565b92915050565b600081519050610fb481610a90565b92915050565b600080600080600060a08688031215610fd657610fd5610a8b565b5b6000610fe488828901610f5a565b9550506020610ff588828901610f90565b945050604061100688828901610fa5565b935050606061101788828901610fa5565b925050608061102888828901610f5a565b9150509295509295909350565b600061104082610f6f565b915061104b83610f6f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108a57611089610c47565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c7576110c6610c47565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110457611103610c47565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114157611140610c47565b5b82820290509291505056fea2646970667358221220381e25ceeeeadb90f740dae0c92f4c6b6bfa5cea4e02f0935dabc4a533042fd964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "senders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "sentAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}