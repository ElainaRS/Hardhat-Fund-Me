{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n\r\npragma solidity ^0.8.8;\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror Fund__NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint;\r\n\r\n    //if a variable is initilize once and never changes you can use constant to save some gas\r\n    uint256 public constant minimumUsd = 50 * 1e18;\r\n    address[] private senders;\r\n    mapping(address => uint) private sentAmount;\r\n    AggregatorV3Interface private priceFeed;\r\n    address private immutable owner;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        //msg.value is the amount we are sending to the contract\r\n        //you have to specify the first parameter of the function infront as an object and use dot convextion and if there was a sencond parameter you have to provide that inside the function\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\r\n            \"Didn't send enough\"\r\n        ); // 1e18 == 1 * 10 * 18 == 1000000000000000000\r\n        senders.push(msg.sender);\r\n        sentAmount[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint senderIndex = 0;\r\n            senderIndex < senders.length;\r\n            senderIndex++\r\n        ) {\r\n            address funders = senders[senderIndex];\r\n            sentAmount[funders] = 0;\r\n        }\r\n        senders = new address[](0);\r\n\r\n        //Now to transfer ETH from this contract to an address who call this withdraw function\r\n        // Here msg.sender is of type address which cannot sent ether or anything to anyother address\r\n        // So we are making the address payable type which can sent any crypto from this contract to the callers address\r\n        //also here address(this) refers to the address of this contract address\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n\r\n        //Now using send method\r\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        //require(sendSuccess,\"send fail\");\r\n\r\n        //Now using call method and it is the most reccommed method\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call Failed\");\r\n    }\r\n\r\n    //since you are using this in the constructor you have to use immutable i dont know why i cant use contant also its only for the variable you are not changing\r\n\r\n    modifier onlyOwner() {\r\n        //require is old way for checking owner and it cost more gas\r\n        //require(msg.sender == owner,\"Sorry sir you are not the owner\");\r\n\r\n        //this is the new method for checking the owner\r\n        if (msg.sender != owner) {\r\n            revert Fund__NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner {\r\n        address[] memory sender = senders;\r\n        //mappings cant be in memory\r\n        for (uint funderIndex = 0; funderIndex < sender.length; funderIndex++) {\r\n            address senderRead = sender[funderIndex];\r\n            sentAmount[senderRead] = 0;\r\n        }\r\n        senders = new address[](0);\r\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\r\n        require(success, \"Call Failed\");\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function getSenders(uint index) public view returns (address) {\r\n        return senders[index];\r\n    }\r\n\r\n    function getSentAmount(address sender) public view returns (uint) {\r\n        return sentAmount[sender];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return priceFeed;\r\n    }\r\n\r\n    //What happen if someone send eth to this contract without calling the fund fuction\r\n    /*   receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    } */\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: ISC\r\n\r\npragma solidity ^0.8.8;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        //to get the price you need to intreact with the oracle network in the chainlink contract\r\n        //for that you need the ABI and the Contract Address\r\n\r\n        (, int price, , , ) = priceFeed.latestRoundData();\r\n        //it the price of the ETH in terms of USD\r\n        //and it will return 8 decimal units\r\n        return uint(price * 1e10);\r\n    }\r\n\r\n    /*     function getVersion() internal view returns (uint) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        );\r\n        return priceFeed.version();\r\n    } */\r\n\r\n    function getConversionRate(uint _ethAmount, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint)\r\n    {\r\n        uint ethPrice = getPrice(priceFeed);\r\n        uint ethPriceInUsd = (ethPrice * _ethAmount) / 1e18;\r\n        return ethPriceInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}