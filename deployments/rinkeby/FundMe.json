{
  "address": "0xac9522c32C928761bF5DA39c543Ee163F8D9fc04",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "senders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8ba6c67da7616a792cc4088ab25067a8dc1d974efa90363a1c8e42368b1a658f",
  "receipt": {
    "to": null,
    "from": "0x141B85d2C1DDd0B4D27E0a36801dfe6C7e06bb67",
    "contractAddress": "0xac9522c32C928761bF5DA39c543Ee163F8D9fc04",
    "transactionIndex": 20,
    "gasUsed": "877811",
    "logsBloom": "0x
    "blockHash": "0x630df3cd7528298df8186ae30ca44c2af738f2af2384bf1c618a1218e433e131",
    "transactionHash": "0x8ba6c67da7616a792cc4088ab25067a8dc1d974efa90363a1c8e42368b1a658f",
    "logs": [],
    "blockNumber": 10805768,
    "cumulativeGasUsed": "1610697",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "5d131c9b6bfbf1b06d788fdf63a2b849",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"senders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint;\\r\\n\\r\\n    //if a variable is initilize once and never changes you can use constant to save some gas\\r\\n    uint256 public constant minimumUsd = 50 * 1e18;\\r\\n    address[] public senders;\\r\\n    mapping(address => uint) public sentAmount;\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n    address public immutable owner;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        //msg.value is the amount we are sending to the contract\\r\\n        //you have to specify the first parameter of the function infront as an object and use dot convextion and if there was a sencond parameter you have to provide that inside the function\\r\\n        require(\\r\\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\\r\\n            \\\"Didn't send enough\\\"\\r\\n        ); // 1e18 == 1 * 10 * 18 == 1000000000000000000\\r\\n        senders.push(msg.sender);\\r\\n        sentAmount[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint senderIndex = 0;\\r\\n            senderIndex < senders.length;\\r\\n            senderIndex++\\r\\n        ) {\\r\\n            address funders = senders[senderIndex];\\r\\n            sentAmount[funders] = 0;\\r\\n        }\\r\\n        senders = new address[](0);\\r\\n\\r\\n        //Now to transfer ETH from this contract to an address who call this withdraw function\\r\\n        // Here msg.sender is of type address which cannot sent ether or anything to anyother address\\r\\n        // So we are making the address payable type which can sent any crypto from this contract to the callers address\\r\\n        //also here address(this) refers to the address of this contract address\\r\\n        /*  payable(msg.sender).transfer(address(this).balance);\\r\\n\\r\\n    //Now using send method\\r\\n    bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n    require(sendSuccess,\\\"send fail\\\"); */\\r\\n\\r\\n        //Now using call method and it is the most reccommed method\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    //since you are using this in the constructor you have to use immutable i dont know why i cant use contant also its only for the variable you are not changing\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        //require is old way for checking owner and it cost more gas\\r\\n        //require(msg.sender == owner,\\\"Sorry sir you are not the owner\\\");\\r\\n\\r\\n        //this is the new method for checking the owner\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //What happen if someone send eth to this contract without calling the fund fuction\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b53fcaca420924028980b440cbc21d5dda370399fb7850d101f30402c9223e4\",\"license\":\"ISC\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        //to get the price you need to intreact with the oracle network in the chainlink contract\\r\\n        //for that you need the ABI and the Contract Address\\r\\n\\r\\n        (, int price, , , ) = priceFeed.latestRoundData();\\r\\n        //it the price of the ETH in terms of USD\\r\\n        //and it will return 8 decimal units\\r\\n        return uint(price * 1e10);\\r\\n    }\\r\\n\\r\\n    /*     function getVersion() internal view returns (uint) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    } */\\r\\n\\r\\n    function getConversionRate(uint _ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint ethPrice = getPrice(priceFeed);\\r\\n        uint ethPriceInUsd = (ethPrice * _ethAmount) / 1e18;\\r\\n        return ethPriceInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6088f4c40cab253a6b6e6db92fb4c981aa471a7a5afddbc037e8671184b1beb3\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fe838038062000fe883398181016040528101906100349190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805160601c610e8062000168600039600081816102f301526105590152610e806000f3fe6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b146100fa5780639977c78a14610125578063b60d428814610162578063c726e8e91461016c57610083565b8063098de8201461008d5780633ccfd60b146100b8578063741bef1a146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b6040516100af919061076e565b60405180910390f35b3480156100c457600080fd5b506100cd6102f1565b005b3480156100db57600080fd5b506100e4610531565b6040516100f19190610808565b60405180910390f35b34801561010657600080fd5b5061010f610557565b60405161011c9190610844565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610890565b61057b565b6040516101599190610844565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108e9565b6105ba565b6040516101a0919061076e565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610973565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109c2565b92505081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610376576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561042157600080828154811061039b5761039a610a18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041990610a47565b915050610379565b50600067ffffffffffffffff81111561043d5761043c610a90565b5b60405190808252806020026020018201604052801561046b5781602001602082028036833780820191505090505b50600090805190602001906104819291906106ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a890610af0565b60006040518083038185875af1925050503d80600081146104e5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ea565b606091505b505090508061052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590610b51565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000806105de8361060e565b90506000670de0b6b3a764000085836105f79190610b71565b6106019190610bfa565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065757600080fd5b505afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f9190610cb8565b5050509150506402540be400816106a69190610d33565b915050919050565b828054828255906000526020600020908101928215610727579160200282015b828111156107265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ce565b5b5090506107349190610738565b5090565b5b80821115610751576000816000905550600101610739565b5090565b6000819050919050565b61076881610755565b82525050565b6000602082019050610783600083018461075f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107ce6107c96107c484610789565b6107a9565b610789565b9050919050565b60006107e0826107b3565b9050919050565b60006107f2826107d5565b9050919050565b610802816107e7565b82525050565b600060208201905061081d60008301846107f9565b92915050565b600061082e82610789565b9050919050565b61083e81610823565b82525050565b60006020820190506108596000830184610835565b92915050565b600080fd5b61086d81610755565b811461087857600080fd5b50565b60008135905061088a81610864565b92915050565b6000602082840312156108a6576108a561085f565b5b60006108b48482850161087b565b91505092915050565b6108c681610823565b81146108d157600080fd5b50565b6000813590506108e3816108bd565b92915050565b6000602082840312156108ff576108fe61085f565b5b600061090d848285016108d4565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061095d601283610916565b915061096882610927565b602082019050919050565b6000602082019050818103600083015261098c81610950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109cd82610755565b91506109d883610755565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0d57610a0c610993565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a5282610755565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8557610a84610993565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ada600083610abf565b9150610ae582610aca565b600082019050919050565b6000610afb82610acd565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610b3b600b83610916565b9150610b4682610b05565b602082019050919050565b60006020820190508181036000830152610b6a81610b2e565b9050919050565b6000610b7c82610755565b9150610b8783610755565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bc057610bbf610993565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c0582610755565b9150610c1083610755565b925082610c2057610c1f610bcb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4a81610c2b565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b6000819050919050565b610c8081610c6d565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b600081519050610cb281610864565b92915050565b600080600080600060a08688031215610cd457610cd361085f565b5b6000610ce288828901610c58565b9550506020610cf388828901610c8e565b9450506040610d0488828901610ca3565b9350506060610d1588828901610ca3565b9250506080610d2688828901610c58565b9150509295509295909350565b6000610d3e82610c6d565b9150610d4983610c6d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8857610d87610993565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc557610dc4610993565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0257610e01610993565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3f57610e3e610993565b5b82820290509291505056fea2646970667358221220ded60de6ee41409d7c3b314652b8a3b956c7dbf6340068d2dff9a6d75562daa864736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b146100fa5780639977c78a14610125578063b60d428814610162578063c726e8e91461016c57610083565b8063098de8201461008d5780633ccfd60b146100b8578063741bef1a146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e4565b6040516100af919061076e565b60405180910390f35b3480156100c457600080fd5b506100cd6102f1565b005b3480156100db57600080fd5b506100e4610531565b6040516100f19190610808565b60405180910390f35b34801561010657600080fd5b5061010f610557565b60405161011c9190610844565b60405180910390f35b34801561013157600080fd5b5061014c60048036038101906101479190610890565b61057b565b6040516101599190610844565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906108e9565b6105ba565b6040516101a0919061076e565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d290919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610973565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102db91906109c2565b92505081905550565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610376576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561042157600080828154811061039b5761039a610a18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041990610a47565b915050610379565b50600067ffffffffffffffff81111561043d5761043c610a90565b5b60405190808252806020026020018201604052801561046b5781602001602082028036833780820191505090505b50600090805190602001906104819291906106ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a890610af0565b60006040518083038185875af1925050503d80600081146104e5576040519150601f19603f3d011682016040523d82523d6000602084013e6104ea565b606091505b505090508061052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052590610b51565b60405180910390fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061058b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000806105de8361060e565b90506000670de0b6b3a764000085836105f79190610b71565b6106019190610bfa565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065757600080fd5b505afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f9190610cb8565b5050509150506402540be400816106a69190610d33565b915050919050565b828054828255906000526020600020908101928215610727579160200282015b828111156107265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ce565b5b5090506107349190610738565b5090565b5b80821115610751576000816000905550600101610739565b5090565b6000819050919050565b61076881610755565b82525050565b6000602082019050610783600083018461075f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107ce6107c96107c484610789565b6107a9565b610789565b9050919050565b60006107e0826107b3565b9050919050565b60006107f2826107d5565b9050919050565b610802816107e7565b82525050565b600060208201905061081d60008301846107f9565b92915050565b600061082e82610789565b9050919050565b61083e81610823565b82525050565b60006020820190506108596000830184610835565b92915050565b600080fd5b61086d81610755565b811461087857600080fd5b50565b60008135905061088a81610864565b92915050565b6000602082840312156108a6576108a561085f565b5b60006108b48482850161087b565b91505092915050565b6108c681610823565b81146108d157600080fd5b50565b6000813590506108e3816108bd565b92915050565b6000602082840312156108ff576108fe61085f565b5b600061090d848285016108d4565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b600061095d601283610916565b915061096882610927565b602082019050919050565b6000602082019050818103600083015261098c81610950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109cd82610755565b91506109d883610755565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0d57610a0c610993565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a5282610755565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8557610a84610993565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ada600083610abf565b9150610ae582610aca565b600082019050919050565b6000610afb82610acd565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610b3b600b83610916565b9150610b4682610b05565b602082019050919050565b60006020820190508181036000830152610b6a81610b2e565b9050919050565b6000610b7c82610755565b9150610b8783610755565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bc057610bbf610993565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c0582610755565b9150610c1083610755565b925082610c2057610c1f610bcb565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4a81610c2b565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b6000819050919050565b610c8081610c6d565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b600081519050610cb281610864565b92915050565b600080600080600060a08688031215610cd457610cd361085f565b5b6000610ce288828901610c58565b9550506020610cf388828901610c8e565b9450506040610d0488828901610ca3565b9350506060610d1588828901610ca3565b9250506080610d2688828901610c58565b9150509295509295909350565b6000610d3e82610c6d565b9150610d4983610c6d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8857610d87610993565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc557610dc4610993565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0257610e01610993565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3f57610e3e610993565b5b82820290509291505056fea2646970667358221220ded60de6ee41409d7c3b314652b8a3b956c7dbf6340068d2dff9a6d75562daa864736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "senders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "sentAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}